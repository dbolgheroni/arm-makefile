CPU = cortex-m3
MCU = STM32F103xB

OS != uname -s
.if $(OS) == OpenBSD
LOCALBASE = /usr/local
.else
LOCALBASE = /usr
.endif

# toolchain
CC = $(LOCALBASE)/bin/arm-none-eabi-gcc
AS = $(LOCALBASE)/bin/arm-none-eabi-as
LD = $(LOCALBASE)/bin/arm-none-eabi-ld
DB = $(LOCALBASE)/bin/arm-none-eabi-gdb
OBJDUMP = $(LOCALBASE)/bin/arm-none-eabi-objdump
OBJCOPY = $(LOCALBASE)/bin/arm-none-eabi-objcopy
SIZE = $(LOCALBASE)/bin/arm-none-eabi-size
OPENOCD = $(LOCALBASE)/bin/openocd
OPENOCD_SCRIPTS = $(LOCALBASE)/share/openocd/scripts
CTAGS = $(LOCALBASE)/bin/uctags


# core
CORE_INC =	-I$(.CURDIR)/bsp/stm32f1/cmsis/include/cm
CORE_INC +=	-I$(.CURDIR)/bsp/stm32f1/cmsis/include/stm32
CORE_INC +=	-I$(.CURDIR)/bsp/stm32f1/core/include
CORE_INC +=	-I$(.CURDIR)/dev/usb
CORE =		startup_stm32f103xb.o \
			system_stm32f1xx.o \
			stm32f1xx_hal_msp.o \
			stm32f1xx_it.o \
			stm32f1xx_hal_timebase_tim.o \
			init.o


# hal
HAL_INC =	-I$(.CURDIR)/bsp/stm32f1/hal/include

HAL =		stm32f1xx_hal.o \
			stm32f1xx_hal_adc.o \
			stm32f1xx_hal_adc_ex.o \
			stm32f1xx_hal_can.o \
			stm32f1xx_hal_cec.o \
			stm32f1xx_hal_cortex.o \
			stm32f1xx_hal_crc.o \
			stm32f1xx_hal_dac.o \
			stm32f1xx_hal_dac_ex.o \
			stm32f1xx_hal_dma.o \
			stm32f1xx_hal_eth.o \
			stm32f1xx_hal_exti.o \
			stm32f1xx_hal_flash.o \
			stm32f1xx_hal_flash_ex.o \
			stm32f1xx_hal_gpio.o \
			stm32f1xx_hal_gpio_ex.o \
			stm32f1xx_hal_hcd.o \
			stm32f1xx_hal_i2c.o \
			stm32f1xx_hal_i2s.o \
			stm32f1xx_hal_irda.o \
			stm32f1xx_hal_iwdg.o \
			stm32f1xx_hal_mmc.o \
			stm32f1xx_hal_nand.o \
			stm32f1xx_hal_nor.o \
			stm32f1xx_hal_pccard.o \
			stm32f1xx_hal_pcd.o \
			stm32f1xx_hal_pcd_ex.o \
			stm32f1xx_hal_pwr.o \
			stm32f1xx_hal_rcc.o \
			stm32f1xx_hal_rcc_ex.o \
			stm32f1xx_hal_rtc.o \
			stm32f1xx_hal_rtc_ex.o \
			stm32f1xx_hal_sd.o \
			stm32f1xx_hal_smartcard.o \
			stm32f1xx_hal_spi.o \
			stm32f1xx_hal_sram.o \
			stm32f1xx_hal_tim.o \
			stm32f1xx_hal_tim_ex.o \
			stm32f1xx_hal_uart.o \
			stm32f1xx_hal_usart.o \
			stm32f1xx_hal_wwdg.o \
			stm32f1xx_ll_adc.o \
			stm32f1xx_ll_crc.o \
			stm32f1xx_ll_dac.o \
			stm32f1xx_ll_dma.o \
			stm32f1xx_ll_exti.o \
			stm32f1xx_ll_fsmc.o \
			stm32f1xx_ll_gpio.o \
			stm32f1xx_ll_i2c.o \
			stm32f1xx_ll_pwr.o \
			stm32f1xx_ll_rcc.o \
			stm32f1xx_ll_rtc.o \
			stm32f1xx_ll_sdmmc.o \
			stm32f1xx_ll_spi.o \
			stm32f1xx_ll_tim.o \
			stm32f1xx_ll_usart.o \
			stm32f1xx_ll_usb.o \
			stm32f1xx_ll_utils.o


# rtos
RTOS_INC =	-I$(.CURDIR)/bsp/stm32f1/freertos/include \
			-I$(.CURDIR)/bsp/stm32f1/freertos/portable/GCC/ARM_CM3 \
			-I$(.CURDIR)/bsp/stm32f1/freertos/CMSIS_RTOS_V2
RTOS =		port.o \
			heap_4.o \
			list.o \
			queue.o \
			tasks.o \
			timers.o

# usb cdc
USB_INC =	-I$(.CURDIR)/bsp/stm32f1/usb/core/include \
			-I$(.CURDIR)/bsp/stm32f1/usb/class/cdc/include
USB =		usbd_core.o \
			usbd_ctlreq.o \
			usbd_ioreq.o \
			usbd_cdc.o \
			usbd_conf.o \
			usbd_desc.o \
			usbd_cdc_if.o \
			usb_device.o

DRV_INC =	-I$(.CURDIR)/drv
DRV =		gpio.o \
			spi.o \
			util.o \
			can.o \
			mcp2515.o

.PATH:	$(.CURDIR)/bsp/stm32f1/cmsis/src/stm32 \
		$(.CURDIR)/bsp/stm32f1/cmsis/src/stm32/startup \
		$(.CURDIR)/bsp/stm32f1/hal/src \
		$(.CURDIR)/bsp/stm32f1/core/src \
		$(.CURDIR)/bsp/stm32f1/usb/core/src \
		$(.CURDIR)/bsp/stm32f1/usb/class/cdc/src \
		$(.CURDIR)/bsp/stm32f1/freertos \
		$(.CURDIR)/bsp/stm32f1/freertos/portable/GCC/ARM_CM3 \
		$(.CURDIR)/bsp/stm32f1/freertos/portable/MemMang \
		$(.CURDIR)/bsp/stm32f1/freertos/CMSIS_RTOS_V2 \
		$(.CURDIR)/bsp/stm32f1/usb/core/src \
		$(.CURDIR)/bsp/stm32f1/usb/class/cdc/src \
		$(.CURDIR)/src \
		$(.CURDIR)/src-examples \
		$(.CURDIR)/dev/usb \
		$(.CURDIR)/drv


.SUFFIXES: .s .c .o

.ORDER:	build size
all:	build size

build:	obj $(PROG).elf

core:		$(CORE)
hal:		$(HAL)
usb:		$(USB)
rtos:		$(RTOS)
drv:		$(DRV)

obj:	hal rtos core drv $(PROG).o

CFLAGS = -g -gdwarf-2 \
		-Og -c -mcpu=$(CPU) -mthumb \
		-Wall -Wno-unused-function \
		-D$(MCU)
ASFLAGS = -c -mcpu=$(CPU) -mthumb

# XXX: generates correct code only with -Os and -Og, not with -O0, -O1, etc.
.c.o:
	$(CC) $(CFLAGS) \
		$(CORE_INC) \
		$(HAL_INC) \
		$(RTOS_INC) \
		$(USB_INC) \
		$(DRV_INC) \
		$<

.s.o:
	$(CC) -x assembler-with-cpp $(ASFLAGS) $<

$(PROG).elf: obj
	$(CC) $(.OBJDIR)/*.o \
		-Wall \
		-g -static -mcpu=$(CPU) \
		-Wl,-Map,$(@:R).map,--gc-sections,--cref \
		-Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group \
		-T $(.CURDIR)/ld/STM32F103C8Tx_FLASH.ld \
		-o $@

startup-stm32f1.o:
	$(AS) -mcpu=$(CPU) -g -o $@ $<

.PHONY: download size disasm tags debugd debug
debugd:
	$(OPENOCD) -f $(OPENOCD_SCRIPTS)/interface/$(OPENOCD_INTERFACE) \
		-f $(OPENOCD_SCRIPTS)/board/$(OPENOCD_TARGET)

debug:
	$(DB) -x ../arm-debug.gdb $(.OBJDIR)/$(PROG).elf

.if defined(FW)
PROG = $(FW:S/^/$(.CURDIR)\/test\/elf\//)
.endif
download:
	@echo $(PROG)
	$(OPENOCD) -f $(OPENOCD_SCRIPTS)/interface/$(OPENOCD_INTERFACE) \
		-f $(OPENOCD_SCRIPTS)/board/$(OPENOCD_TARGET) \
		-c "init" -c "reset init" \
		-c "flash write_image erase $(PROG).elf" \
		-c "reset" \
		-c "shutdown"

trace:
	$(OPENOCD) -f $(OPENOCD_SCRIPTS)/interface/$(OPENOCD_INTERFACE) \
		-f $(OPENOCD_SCRIPTS)/target/$(OPENOCD_TARGET) \
		-c "tpiu config external uart on 72000000 12000000" \
		-c "itm ports 0"

size:
	$(SIZE) $(PROG).elf

disasm: $(PROG).elf
	$(OBJDUMP) -h -S -t $(PROG).elf

tags:
	$(CTAGS) -R --format=1 --languages=C,C++ \
		-o ../tags \
		$(.CURDIR)/bsp \
		$(.CURDIR)/dev \
		$(.CURDIR)/src

clean:
	rm -rf $(.OBJDIR)/*
